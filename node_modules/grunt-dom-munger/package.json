{
  "name": "grunt-dom-munger",
  "description": "Read and manipulate HTML with CSS selectors. Ex. read <script> tags from your html.  Remove nodes, add nodes, and more.",
  "version": "3.1.0",
  "homepage": "https://github.com/cgross/grunt-dom-munger",
  "author": {
    "name": "Chris Gross",
    "email": "schtoo@schtoo.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cgross/grunt-dom-munger.git"
  },
  "bugs": {
    "url": "https://github.com/cgross/grunt-dom-munger/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/cgross/grunt-dom-munger/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-uglify": "~0.2.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "html",
    "jquery",
    "cheerio"
  ],
  "dependencies": {
    "cheerio": "~0.12.3"
  },
  "readme": "# grunt-dom-munger [![Build Status](https://travis-ci.org/cgross/grunt-dom-munger.png?branch=master)](https://travis-ci.org/cgross/grunt-dom-munger)\n\n> Read and manipulate HTML documents using CSS selectors.\n\nUse this task to read and transform your HTML documents.  Typical use cases include:\n\n* Read the references from your `script` or `link` tags and pass those to `concat`,`uglify`, etc automatically.\n* Update HTML to remove script references or anything that is not intended for your production builds.\n* Add, update, or remove any DOM elements for any reason.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1` and Node `>=0.8`.\n\n```shell\nnpm install grunt-dom-munger --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-dom-munger');\n```\n\n## The \"dom_munger\" task\n\n### Overview\nThe dom-munger reads one or more HTML files and performs one or more operations on them.  \n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        //You typically would only specify one option per target but they may be combined\n        read: {selector:'link',attribute:'href',writeto:'myCssRefs',isPath:true},\n        remove: '#removeMe',\n        update: {selector:'html',attribute:'appmode', value:'production'},\n        prefix: {selector:'link',attribute:'href',value:'project-name/'},\n        suffix: {selector:'html',attribute:'version',value:'.0.1'},\n        append: {selector:'body',html:'<div id=\"appended\">Im being appended</div>'},\n        prepend: {selector:'body',html:'<span>Im being prepended</span>'},\n        text: {selector:'title',text:'My App'},\n        callback: function($){\n          $('#sample2').text('Ive been updated via callback');\n        }\n      },\n      src: 'index.html', //could be an array of files\n      dest: 'dist/index.html' //optional, if not specified the src file will be overwritten\n    },\n  },\n})\n```\n\n\n### Options\n\nNote: each option (except callback) requires a `selector`.  This can be any valid JQuery selector.\n\n#### options.read \nExtract the value of a given attribute from the set of matched elements then set the values into `dom_munger.data.{writeto}`.  A typical use-case is to grab the script references from your html file and pass that to `concat`,`uglify`, or `cssmin`.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        read: {selector:'script',attribute:'src',writeto:'myJsRefs',isPath:true}\n      },\n      src: 'index.html'\n    },\n  },\n  uglify: {\n    dist: {\n      src:['other.js','<%= dom_munger.data.myJsRefs %>'],\n      dest: 'dist/app.min.js'\n    }\n  }\n})\n```\n\nWhen `isPath` is true, the extracted values are assumed to be file references and their path is made relative to the Gruntfile.js rather than the file they're read from.  This is usually necessary when passing the values to another grunt task like `concat` or `uglify`.\n\n#### options.remove\nRemoves one or more matched elements.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        remove: '#removeMe' //remove an element with the id of removeMe\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    },\n  },\n})\n```\n#### options.update\nUpdates the value of a given attribute for the set of matched elements.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        update: {selector:'html',attribute:'appmode', value:'production'}, //set a appmode=\"production\" on <html>\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    },\n  },\n})\n```\n\n#### options.prefix\nPrepends to the value of a given attribute for the set of matched elements.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        prefix: {selector:'link',attribute:'href', value:'project-name/'}, //prepend project-name to the href attribute, for example href=\"project-name/next/path\" on <link>\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    },\n  },\n})\n```\n\n#### options.suffix\nAppends to the value of a given attribute for the set of matched elements.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        suffix: {selector:'html',attribute:'version', value:'.0.1'}, //append .0.1 to the version attribute, for example version=\"1.0.1\" on <html>\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    },\n  },\n})\n```\n\n#### options.append\nAppends the content to each matched element.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        append: {selector:'body',html:'<div id=\"appended\">Im being appended</div>'}\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    },\n  },\n})\n```\n\n#### options.prepend\nPrepends the content to each matched element.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        prepend: {selector:'body',html:'<span>Im being prepended</span>'}\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    },\n  },\n})\n```\n\n#### options.text\nUpdates the text content of the matched elements.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        text: {selector:'title',text:'My App'} //Updates the <title> to \"My App\"\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    },\n  },\n})\n```\n\n#### options.callback\nWhen you feel like bustin loose.  Set a callback function and use the passed JQuery object to do anything you want to the HTML.\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    your_target: {\n      options: {\n        callback: function($){\n          //do anything you want here\n        }\n      },\n      src: 'index.html',\n      dest: 'dist/index.html'\n    }\n  }\n})\n```\n\n## Full End-to-End Example for Concatentation and Minification\n\nThe following is an example config to read your js and css references from html, concat and min them, and \nupdate the html with the new combined files.\n\nThis configuration would be run in this order:\n\n```shell\ngrunt dom_munger:readcss dom_munger:readjs copy cssmin uglify dom_munger:updatecss dom_munger:updatejs\n```\n\n```js\ngrunt.initConfig({\n  dom_munger: {\n    readcss: {\n      options: {\n          read: {selector:'link',attribute:'href',writeto:'cssRefs',isPath:true}\n        }\n      },\n      src: 'index.html' //read from source index.html\n    },\n    readjs: {\n      options:{\n        read: {selector:'script',attribute:'src',writeto:'jsRefs',isPath:true}\n      },\n      src: 'index.html' //read from source index.html\n    },\n    updatecss: {\n      options: {\n        append: {selector:'head',html:'<link href=\"css/app.full.min.css\" rel=\"stylesheet\">'}\n      },\n      src:'dist/index.html'  //update the dist/index.html (the src index.html is copied there)\n    },\n    updatejs: {\n      options: {\n        append: {selector:'body',html:'<script src=\"js/app.full.min.js\"></script>'}\n      },\n      src: 'dist/index.html'  //update the dist/index.html (the src index.html is copied there)\n    }\n  },\n  copy: {\n    main: {\n      files: [\n        {src: ['index.html'], dest: 'dist/'} //copy index.html to dist/index.html\n      ]\n    }\n  },\n  cssmin: {\n    main: {\n      src:'<%= dom_munger.data.cssRefs %>', //use our read css references and concat+min them\n      dest:'dist/css/app.full.min.css'\n    }\n  },\n  uglify: {\n    main: {\n      src: '<%= dom_munger.data.jsRefs %>', //use our read js references and concat+min them\n      dest:'dist/js/app.full.min.js'\n    }\n  }\n});\n```\n\n## Release History\n \n * v3.1.0 - Prefix and suffix options added.  Fixes for issues #8, #10, and #11.\n * v3.0.0 - Removed `jsdom` engine as `cheerio` is as good without needing contextify.\n * v2.0.0 - Moved to `cheerio` engine.  Upgraded jquery to v2.\n * v1.0.1 - `remove` moved to the second to last operation performed (only `callback` is later).\n * v1.0.0 - Read task modified to write values to `dom_munger.data` rather than to write directly to a task config.\n * v0.1.0 - Initial release.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-dom-munger@3.1.0",
  "dist": {
    "shasum": "3eb20943eeaedf6a10f4fe29029a0c1530e30193"
  },
  "_from": "grunt-dom-munger@~3.1.0",
  "_resolved": "https://registry.npmjs.org/grunt-dom-munger/-/grunt-dom-munger-3.1.0.tgz"
}
