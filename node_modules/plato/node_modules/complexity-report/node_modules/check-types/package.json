{
  "name": "check-types",
  "version": "0.6.5",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com"
  },
  "description": "A tiny library for checking types and throwing exceptions.",
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com"
    },
    {
      "name": "Rowan Manning"
    },
    {
      "name": "Forbes Lindesay"
    },
    {
      "name": "Fabrizio Moscon"
    }
  ],
  "main": "./src/check-types.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/check-types.js"
  },
  "keywords": [
    "types",
    "type-checking",
    "duck-typing",
    "arguments",
    "parameters"
  ],
  "devDependencies": {
    "jake": "0.7.x",
    "jshint": "2.1.x",
    "mocha": "1.13.x",
    "chai": "1.8.x",
    "uglify-js": "2.4.x"
  },
  "license": "MIT",
  "scripts": {
    "test": "jake test"
  },
  "readme": "# check-types.js\n\n[![Build status][ci-image]][ci-status]\n\nA tiny JavaScript library\nfor checking types\nand throwing exceptions.\n\n## Why would I want such a thing?\n\nWriting explicit conditions\nin your functions\nfor checking arguments\nand throwing exceptions\nis a task that\nswiftly becomes tiresome\nand adds complexity\nto your codebase.\n\nThe purpose of check-types.js\nis to remove this burden\nfrom JavaScript application developers\nin an efficient and robust manner.\n\n## How tiny is it?\n\n14.3 kb unminified with comments, 2.2 kb minified, 0.8 kb minified + gzipped.\n\n## How do I install it?\n\nAny of the following will do:\n\n```\nnpm install check-types\n\njam install check-types\n\nbower install check-types\n\ncomponent install philbooth/check-types.js\n\ngit clone git@github.com:philbooth/check-types.js.git\n```\n\n## How do I use it?\n\nIf you are running in\n[Node.js][node],\n[Browserify]\nor another CommonJS-style\nenvironment,\nyou can `require`\ncheck-types.js like so:\n\n```javascript\nvar check = require('check-types');\n```\n\nIt also the supports\nthe AMD-style format\npreferred by [Require.js][require]:\n\n```javascript\nrequire.config({\n    paths: {\n        check: 'check-types.js/src/check-types'\n    }\n});\n\nrequire([ 'check' ], function (check) {\n});\n```\n\nIf you are\nincluding check-types.js\nwith an HTML `<script>` tag,\nor neither of the above environments\nare detected,\ncheck-types.js will just export its interface globally\nas `check`.\n\nOnce you have loaded the library\nin your application,\na whole bunch of functions are available\nto call:\n\n* `check.quacksLike(thing, duck)`:\n  Tests whether an object 'quacks like a duck'.\n  Returns `true`\n  if the first argument has all of the properties\n  of the second, archetypal argument (the 'duck').\n  Returns `false` otherwise.\n  If either argument is not an object,\n  an exception is thrown.\n\n* `check.verifyQuack(thing, duck, message)`:\n  Throws an exception\n  if an object does not 'quack like a duck'.\n\n* `check.isInstance(thing, prototype)`:\n  Returns `true` if an object is an instance of a prototype,\n  `false` otherwise.\n\n* `check.verifyInstance(thing, prototype, message)`:\n  Throws an exception if an object is not an instance of a prototype.\n\n* `check.isEmptyObject(thing)`:\n  Returns `true` if something is an empty, non-null, non-array object,\n  `false` otherwise.\n\n* `check.verifyEmptyObject(thing, message)`:\n  Throws an exception unless something is an empty, non-null, non-array object.\n\n* `check.isObject(thing)`:\n  Returns `true` if something is a non-null, non-array, non-date object,\n  `false` otherwise.\n\n* `check.verifyObject(thing, message)`:\n  Throws an exception unless something is a non-null, non-array, non-date object.\n\n* `check.isLength(thing, length)`:\n  Returns `true` if something has a length property\n  that matches the specified length,\n  `false` otherwise.\n\n* `check.verifyLength(thing, length, message)`:\n  Throws an exception unless something has a length property\n  matching the specified length.\n\n* `check.isArray(thing)`:\n  Returns `true` something is an array,\n  `false` otherwise.\n\n* `check.verifyArray(thing, message)`:\n  Throws an exception unless something is an array.\n\n* `check.isDate(thing)`:\n  Returns `true` something is a date,\n  `false` otherwise.\n\n* `check.verifyDate(thing, message)`:\n  Throws an exception unless something is a date.\n\n* `check.isFunction(thing)`:\n  Returns `true` if something is function,\n  `false` otherwise.\n\n* `check.verifyFunction(thing, message)`:\n  Throws an exception unless something is function.\n\n* `check.isUnemptyString(thing)`:\n  Returns `true` if something is a non-empty string,\n  `false` otherwise.\n\n* `check.verifyUnemptyString(thing, message)`:\n  Throws an exception unless something is a non-empty string.\n\n* `check.isString(thing)`:\n  Returns `true` if something is a string,\n  `false` otherwise.\n\n* `check.verifyString(thing, message)`:\n  Throws an exception unless something is a string.\n\n* `check.isPositiveNumber(thing)`:\n  Returns `true` if something is a number\n  greater than zero,\n  `false` otherwise.\n\n* `check.verifyPositiveNumber(thing, message)`:\n  Throws an exception unless something is a number\n  greater than zero.\n\n* `check.isNegativeNumber(thing)`:\n  Returns `true` if something is a number\n  less than zero,\n  `false` otherwise.\n\n* `check.verifyNegativeNumber(thing, message)`:\n  Throws an exception unless something is a number\n  less than zero.\n\n* `check.isEvenNumber(thing)`:\n  Returns `true` if something is an even number,\n  `false` otherwise.\n\n* `check.verifyEvenNumber(thing, message)`:\n  Throws an exception unless something is an even number.\n\n* `check.isOddNumber(thing)`:\n  Returns `true` if something is an even number,\n  `false` otherwise.\n\n* `check.verifyOddNumberthing, message)`:\n  Throws an exception unless something is an even number.\n\n* `check.isNumber(thing)`:\n  Returns `true` if something is a number,\n  `false` otherwise.\n  In this case, `NaN` is not considered a number.\n\n* `check.verifyNumber(thing, message)`:\n  Throws an exception unless something is a number.\n  In this case, `NaN` is not considered a number.\n\n## How do I set up the build environment?\n\nThe build environment relies on\nNode.js,\n[NPM],\n[Jake],\n[JSHint],\n[Mocha],\n[Chai] and\n[UglifyJS].\nAssuming that you already have Node.js and NPM set up,\nyou just need to run `npm install` to\ninstall all of the dependencies as listed in `package.json`.\n\nThe unit tests are in `test/check-types.js`.\nYou can run them with the command `npm test` or `jake test`.\nTo run the tests in a web browser,\nopen `test/check-types.html`.\n\n[ci-image]: https://secure.travis-ci.org/philbooth/check-types.js.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/check-types.js\n[node]: http://nodejs.org/\n[browserify]: http://browserify.org/\n[require]: http://requirejs.org/\n[npm]: https://npmjs.org/\n[jake]: https://github.com/mde/jake\n[jshint]: https://github.com/jshint/node-jshint\n[mocha]: http://visionmedia.github.com/mocha\n[chai]: http://chaijs.com/\n[uglifyjs]: https://github.com/mishoo/UglifyJS\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/philbooth/check-types.js/issues"
  },
  "homepage": "https://github.com/philbooth/check-types.js",
  "_id": "check-types@0.6.5",
  "dist": {
    "shasum": "db1881010c49ee57ab8e7f8d86260bdbff6f8e18"
  },
  "_from": "check-types@0.6.x",
  "_resolved": "https://registry.npmjs.org/check-types/-/check-types-0.6.5.tgz"
}
